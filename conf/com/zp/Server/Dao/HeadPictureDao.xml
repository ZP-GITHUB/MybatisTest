<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zp.Server.Dao.HeadPictureDao">
<!-- 
namespace:名称空间;指定为接口的全类名
id：唯一标识
resultType：返回值类型
#{id}：从传递过来的参数中取出id值
public Employee getEmpById(Integer id);
 -->
 
 	<!--List<HeadPicture> getHeadPicture();  -->
 	<select id="getHeadPicture" resultType="com.zp.Server.model.HeadPicture">
 		select * from `headpicture` WHERE `Owner` IS NULL  OR `Owner` ='' order by rand() LIMIT  1
 	</select>

	<!-- int addpic(HeadPicture hp); -->
	<!-- parameterType：参数类型，可以省略， 
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
	<insert id="addpic" parameterType="com.zp.Server.model.HeadPicture"
		useGeneratedKeys="true" keyProperty="Id" databaseId="mysql">
		INSERT INTO headpicture(`Nickname`,`PictureLink`)
		VALUES(#{Nickname},#{PictureLink})
	</insert>
	
	<!-- 
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
	<!--<insert id="addEmp" databaseId="oracle">-->
		<!--&lt;!&ndash; -->
		<!--keyProperty:查出的主键值封装给javaBean的哪个属性-->
		<!--order="BEFORE":当前sql在插入sql之前运行-->
			   <!--AFTER：当前sql在插入sql之后运行-->
		<!--resultType:查出的数据的返回值类型-->
		<!---->
		<!--BEFORE运行顺序：-->
			<!--先运行selectKey查询id的sql；查出id值封装给javaBean的id属性-->
			<!--在运行插入的sql；就可以取出id属性对应的值-->
		<!--AFTER运行顺序：-->
			<!--先运行插入的sql（从序列中取出新值作为id）；-->
			<!--再运行selectKey查询id的sql；-->
		 <!--&ndash;&gt;-->
		<!--<selectKey keyProperty="id" order="BEFORE" resultType="Integer">-->
			<!--&lt;!&ndash; 编写查询主键的sql语句 &ndash;&gt;-->
			<!--&lt;!&ndash; BEFORE&ndash;&gt;-->
			<!--select EMPLOYEES_SEQ.nextval from dual -->
			<!--&lt;!&ndash; AFTER：-->
			 <!--select EMPLOYEES_SEQ.currval from dual &ndash;&gt;-->
		<!--</selectKey>-->
		<!---->
		<!--&lt;!&ndash; 插入时的主键是从序列中拿到的 &ndash;&gt;-->
		<!--&lt;!&ndash; BEFORE:&ndash;&gt;-->
		<!--insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) -->
		<!--values(#{id},#{lastName},#{email&lt;!&ndash; ,jdbcType=NULL &ndash;&gt;}) -->
		<!--&lt;!&ndash; AFTER：-->
		<!--insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) -->
		<!--values(employees_seq.nextval,#{lastName},#{email}) &ndash;&gt;-->
	<!--</insert>-->
	<!---->


	<!--int addOwnerByNickname(String nickname, String owner);-->
	<!--UPDATE `headpicture` SET `Owner` = ? , Insert_time = ? WHERE `Nickname` = ?-->
	<update id="addOwnerByNickname">
		update headpicture
		set Owner=#{Owner},Insert_time=#{Insert_time}
		where Nickname=#{Nickname}
	</update>

	<!--int delOwnerByNickname(String nickname);-->
	<!--DELETE FROM `headpicture` WHERE `Nickname` = ?-->
	<delete id="delOwnerByNickname">
		DELETE FROM `headpicture` WHERE `Nickname` = #{nickname}
	</delete>
	
	
</mapper>